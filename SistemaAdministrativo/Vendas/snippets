Criando os Models do sistema:

rails g model User name:string document:string kind:integer status:integer notes:text
rails g model Client name:string company_name:string document:string email:string phone:string user:references notes:text status:integer
rails g model Address country:string city:string state:string neighborhood:string street:string number:string client:references user_id:integer
rails g model Product name:string description:text status:integer
rails g model Discount name:string description:text value:integer kind:integer status:integer
rails g model ProductQuantity product:references quantity:integer user:references
rails g model Sale client:references sale_date:date user:references discount:references notes:text
rails g model Comission sale:references value:decimal user:references status:integer note:text
rails db:migrate
Incluindo nossos Enuns e relacionamentos:
class User &lt; ApplicationRecord
  enum kind: [:salesman, :manager]
  enum status: [:active, :inactive]
  has_many :comissions
  has_many :addresses
  has_many :clients
  has_many :product_quantities
  has_many :sales
end

class User &lt; ApplicationRecord
  enum kind: [:salesman, :manager]
  enum status: [:active, :inactive]
  has_many :comissions
  has_many :addresses
  has_many :clients
  has_many :product_quantities
  has_many :sales
end


class Client &lt; ApplicationRecord
  belongs_to :user
  enum status: [:active, :inactive]
  has_one :address
end
 Client &lt; ApplicationRecord
  belongs_to :user
  enum status: [:active, :inactive]
  has_one :address
end


class Address &lt; ApplicationRecord
  belongs_to :client
end

class Address &lt; ApplicationRecord
  belongs_to :client
end


class Product &lt; ApplicationRecord
  enum status: [:active, :inactive]
  has_many :product_quantities
end

class Product &lt; ApplicationRecord
  enum status: [:active, :inactive]
  has_many :product_quantities
end


class Discount &lt; ApplicationRecord
  enum status: [:active, :inactive]
end

class Discount &lt; ApplicationRecord
  enum status: [:active, :inactive]
end


class ProductQuantity &lt; ApplicationRecord
  belongs_to :product
  belongs_to :sale
end

class ProductQuantity &lt; ApplicationRecord
  belongs_to :product
  belongs_to :sale
end


class Sale &lt; ApplicationRecord
  belongs_to :client
  belongs_to :user
  belongs_to :discount
  has_many :product_quantities
end

class Sale &lt; ApplicationRecord
  belongs_to :client
  belongs_to :user
  belongs_to :discount
  has_many :product_quantities
end


class Comission &lt; ApplicationRecord
  belongs_to :sale
  belongs_to :user
end

class Comission &lt; ApplicationRecord
  belongs_to :sale
  belongs_to :user
end
Instalando o Projeto:

gem 'rails_admin'

rails g rails_admin:install
Seed:

# Criando nossos Users --- OBS: Depois que adicionarmos o devise precisamos incluir o email e senha dos users
User.create name: 'José', status: :active, kind: :salesman
User.create name: 'Marcos', status: :active, kind: :manager

# Criando alguns produtos de exemplo
Product.create name: 'Smartphone', description:'Um smartphone novo ...', status: :active
Product.create name: 'Tablet', description:'Um tablet novo ...', status: :active

# Criando um desconto de exemplo
Discount.create name: 'Desconto carnaval', description: 'Aplique esse desconto no carnaval', value: '10', kind: :porcent, status: :active


rake db:seed

Incluindo o Devise:

# Gemfile

gem 'devise'


rails generate devise:install

rails generate devise User

# /config/initializers/rails_admin.rb

## == Devise ==
config.authenticate_with do
  warden.authenticate! scope: :user
end
config.current_user_method(&amp;:current_user)

# /config/initializers/rails_admin.rb
 
## == Devise ==
config.authenticate_with do
  warden.authenticate! scope: :user
end
config.current_user_method(&amp;:current_user)


# /db/seeds.rb
User.create name: 'José', status: :active, kind: :salesman, email: 'salesman@teste.com', password: 123456
User.create name: 'Manuel', status: :active, kind: :salesman, email: 'salesman2@teste.com', password: 123456
User.create name: 'Marcos', status: :active, kind: :manager, email: 'manager@teste.com', password: 123456
 
# Criando alguns produtos de exemplo
Product.create name: 'Smartphone', description:'Um smartphone novo ...', status: :active
Product.create name: 'Tablet', description:'Um tablet novo ...', status: :active
 
# Criando um desconto de exemplo
Discount.create name: 'Desconto carnaval', description: 'Aplique esse desconto no carnaval', value: '10', kind: :porcent, status: :active


rake db:drop
rake db:create
rake db:migrate
rake db:seed
Incluindo o CanCanCan + Filtrando o que os Users podem ver:

# Gemfile

gem 'cancancan', '~> 1.15.0'

rails g cancan:ability
# /config/initializers/rails_admin.rb

## == Cancan ==
config.authorize_with :cancan
# /config/initializers/rails_admin.rb
# /app/models/ability.rb

class Ability
  include CanCan::Ability

  def initialize(user)
    if user
      if user.kind == 'salesman'
        can :access, :rails_admin
        can :dashboard
        can :manage, Client, user_id: user.id
        can :manage, Sale, user_id: user.id
        can :read, Product, status: :active
        can :read, Discount, status: :active
        can :read, Comission, user_id: user.id
        can :manage, ProductQuantity, user_id: user.id
        can :manage, Address, user_id: user.id
      elsif user.kind == 'manager'
        can :manage, :all
      end
    end
  end
end
# /app/models/ability.rb
 
Comissão automática e customização dos campos e tabelas:Adicionar no arquivo: /app/models/sale.rb

has_one :comission

Adicionar no arquivo: /app/models/discount.rb

has_many :sales

Alterar a linha “has_one: address” em “/app/models/client.rb” por:


has_many :address
Rodar no Console
rails g migration add_sale_id_to_product_quantity sale_id:integer
rails g migration add_price_to_product price:decimal
rake db:migrate

Adicionar no arquivo: /app/models/comission.rb
enum status: [:pending, :payd]

Substituir o conteúdo do arquivo: /db/seeds.rb

# Criando nossos Users --- OBS: Depois que adicionarmos o devise precisamos incluir o email e senha dos users
User.create name: 'José', status: :active, kind: :salesman, email: 'salesman@teste.com', password: 123456
User.create name: 'Manuel', status: :active, kind: :salesman, email: 'salesman2@teste.com', password: 123456
User.create name: 'Marcos', status: :active, kind: :manager, email: 'manager@teste.com', password: 123456

# Criando alguns produtos de exemplo
Product.create name: 'Smartphone', description:'Um smartphone novo ...', status: :active, price: 10
Product.create name: 'Tablet', description:'Um tablet novo ...', status: :active, price: 20

# Criando um desconto de exemplo
Discount.create name: 'Desconto carnaval', description: 'Aplique esse desconto no carnaval', value: '10', kind: :porcent, status: :active
Discount.create name: 'Desconto carnaval dinheiro', description: 'Aplique esse desconto quando possível', value: '10', kind: :money, status: :active

# Crindo client
Client.create name: 'Paulo', company_name: 'Google', document: '1234', email: 'paulo@google.com', user: User.first
Client.create name: 'Julia', company_name: 'Google', document: 'abcd', email: 'julia@google.com', user: User.first

Rodar no console:

rake db:drop db:create db:migrate db:seed

Adicionar no arquivo: /app/models/sale.rb

after_save do
    calc = 0
    # Soma o preço dos produtos vezes a quantidade deles
    self.product_quantities.each {|p| calc += p.product.price * p.quantity}
    # Verifica se existe um desconto e aplica caso exista
    if self.discount
      if self.discount.kind == "porcent"
        calc -= calc / self.discount.value
      elsif self.discount.kind == "money"
        calc -= self.discount.value
      end
    end
 
    # Verifica se já existe uma comissão, caso sim atualiza, caso não cria uma nova.
    if self.comission.present?
      self.comission.update(value: (calc * 0.1), status: :pending)
    else
      Comission.create(value: (calc * 0.1), user: self.user, sale: self, status: :pending)
    end
  end

Adicionar no arquivo: /config/initializers/rails_admin.rb

config.model Sale do
  create do
    field  :client
    field  :sale_date
    field  :discount
    field  :notes
    field  :product_quantities

    field :user_id, :hidden do
      default_value do
        bindings[:view]._current_user.id
      end
    end
  end

  edit do
    field  :client
    field  :sale_date
    field  :discount
    field  :notes
    field  :product_quantities

    field :user_id, :hidden do
      default_value do
        bindings[:view]._current_user.id
      end
    end
  end
end

config.model Client do
  create do
    field  :name
    field  :company_name
    field  :document
    field  :email
    field  :phone
    field  :notes
    field  :status
    field  :address

    field :user_id, :hidden do
      default_value do
        bindings[:view]._current_user.id
      end
    end
  end

  edit do
    field  :name
    field  :company_name
    field  :document
    field  :email
    field  :phone
    field  :notes
    field  :status
    field  :address


    field :user_id, :hidden do
      default_value do
        bindings[:view]._current_user.id
      end
    end
  end

  list do
    field  :name
    field  :company_name
    field  :document
    field  :email
    field  :phone
    field  :notes
    field  :status
    field  :address

  end
end

config.model ProductQuantity do
  visible false
end

config.model Address do
  visible false
end


config.model ProductQuantity do
  edit do
    field :product
    field :quantity

    field :user_id, :hidden do
      default_value do
        bindings[:view]._current_user.id
      end
    end
  end
end

 
  edit do
    field  :name
    field  :company_name
    field  :document
    field  :email
    field  :phone
    field  :notes
    field  :status
    field  :address
 
 
    field :user_id, :hidden do
      default_value do
        bindings[:view]._current_user.id
      end
    end
  end
 
  list do
    field  :name
    field  :company_name
    field  :document
    field  :email
    field  :phone
    field  :notes
    field  :status
    field  :address
 
  end
end
 
config.model ProductQuantity do
  visible false
end
 
config.model Address do
  visible false
end
 
 
config.model ProductQuantity do
  edit do
    field :product
    field :quantity
 
    field :user_id, :hidden do
      default_value do
        bindings[:view]._current_user.id
      end
    end
  end
end
Incluindo fotos no nosso Admin:Adicionar ao arquivo: Gemfile
gem 'carrierwave'

Rodar no console:
bundle

Rodar no console:

rails generate uploader Photo

Rodar no console:

rails g migration add_photo_to_product photo:string

Rodar no console:

rake db:migrate

Adicionar ao arquivo: /app/models/product.rb

Ruby
nt_uploader :photo, PhotoUploader